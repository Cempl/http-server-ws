/**********************************************************************************************/
/* FBL_Errors.h										    									  */
/*                                                                       					  */
/* Copyright Paradigma, 1998-2017                                        					  */
/* All Rights Reserved.                                                 					  */
/**********************************************************************************************/
//
//
//	! ATTENTION!
//	! This file is automaticaly generated by transform.php
//	! Edit kernel_errors.xml instead of edit this file.
//

#ifndef _FBL_Errors_h
	#define _FBL_Errors_h
#pragma once

#include <VShared/FBL/publ/Headers/FBL.h>

// FINAL:
#include <VShared/FBL/publ/Headers/FBL_pre_header.h>


/**********************************************************************************************/
FBL_Begin_Namespace


/**********************************************************************************************/
#define DECLARE_ERROR(c, n)	const FBL::ERROR_TYPE c = n


/**********************************************************************************************/


#pragma mark GROUPS


/**********************************************************************************************/
// GROUP:  Warnings
// 

//Succesful completion.
DECLARE_ERROR( ERR_OK                                                      , 0x00000);   // STD

//Warning.
DECLARE_ERROR( ERR_WARNING                                                 , 0x01000);   // STD


/**********************************************************************************************/
// GROUP:  Others
// 

//"%S" is not supported.
DECLARE_ERROR( ERR_FEATURE_NOT_SUPPORTED                                   , 0x0A000);   // STD

//Invalid character set.
DECLARE_ERROR( ERR_INVALID_CHARACTER_SET                                   , 0x2C000);   // STD

//Insufficient resources.
DECLARE_ERROR( ERR_INSUFFICIENT_RESOURCES                                  , 0x53000);

//OS error.
DECLARE_ERROR( ERR_EXTERNAL                                                , 0x54000);

//Operation has been interrupted.
DECLARE_ERROR( ERR_INTERRUPT_OPERATION                                     , 0x57000);

//System is shutting down.
DECLARE_ERROR( ERR_SHUTDOWN                                                , 0x58000);

//File "%S" can't be operated.
DECLARE_ERROR( ERR_OS_FILE                                                 , 0x59000);

//External error ocured.
DECLARE_ERROR( ERR_STREAM_ERROR                                            , 0x60000);

//Encryption error occurred.
DECLARE_ERROR( ERR_ENCRYPTION_ERROR                                        , 0x61000);

//Value is invalid.
DECLARE_ERROR( ERR_VALUE_INVALID                                           , 0x62000);

//SSL error: "%S".
DECLARE_ERROR( ERR_SSL_ERROR                                               , 0x63000);

//Bonjour error.
DECLARE_ERROR( ERR_BONJOUR_ERROR                                           , 0x64000);

//Picture error.
DECLARE_ERROR( ERR_PICTURE_ERROR                                           , 0x65000);

//Volume error.
DECLARE_ERROR( ERR_VOLUME_ERROR                                            , 0x97000);

//Aspect error.
DECLARE_ERROR( ERR_ASPECT_ERROR                                            , 0x98000);

//"%S" Internal error "%S".
DECLARE_ERROR( ERR_INTERNAL_ERROR                                          , 0x99000);

//Error in configuration file.
DECLARE_ERROR( ERR_CONFIG_FILE_ERROR                                       , 0xF0000);   // STD


/**********************************************************************************************/
// GROUP:  Integrity
// 

//Integrity constraint violation.
DECLARE_ERROR( ERR_CONSTRAINT_VIOLATION                                    , 0x23000);   // STD


/**********************************************************************************************/
// GROUP:  Transactions
// 

//Invalid Transaction State.
DECLARE_ERROR( ERR_TRANSACTION_STATE                                       , 0x25000);   // STD

//Rollback transaction.
DECLARE_ERROR( ERR_ROLLBACK                                                , 0x40000);   // STD


/**********************************************************************************************/
// GROUP:  Database errors
// 

//Database error.
DECLARE_ERROR( ERR_DB_ERROR                                                , 0x51000);


/**********************************************************************************************/
// GROUP:  Sequence errors
// 

//Sequence error.
DECLARE_ERROR( ERR_SEQUENCE_ERROR                                          , 0x52000);


/**********************************************************************************************/
// GROUP:  KeyValue errors
// 

//KeyValue error.
DECLARE_ERROR( ERR_KEYVALUE_ERROR                                          , 0x69000);


/**********************************************************************************************/
// GROUP:  Table errors
// 

//Table error.
DECLARE_ERROR( ERR_TABLE_ERROR                                             , 0x70000);


/**********************************************************************************************/
// GROUP:  Fields errors
// 

//Field error.
DECLARE_ERROR( ERR_FIELD_ERROR                                             , 0x80000);


/**********************************************************************************************/
// GROUP:  Links
// 

//Link error.
DECLARE_ERROR( ERR_LINK_ERROR                                              , 0x81000);


/**********************************************************************************************/
// GROUP:  Connection
// 

//Connection error.
DECLARE_ERROR( ERR_CONNECTION_ERROR                                        , 0x82000);


/**********************************************************************************************/
// GROUP:  Indexes
// 

//Index error. Please reindex.
DECLARE_ERROR( ERR_INDEX_ERROR                                             , 0x83000);


/**********************************************************************************************/
// GROUP:  IndexePrefs
// 

//IndexPrefs error.
DECLARE_ERROR( ERR_INDEXPREFS_ERROR                                        , 0x84000);


/**********************************************************************************************/
// GROUP:  Licences
// 

//Licence error.
DECLARE_ERROR( ERR_LICENCE_ERROR                                           , 0x85000);


/**********************************************************************************************/
// GROUP:  Compressor
// 

//Compressor error.
DECLARE_ERROR( ERR_COMPRESSOR_ERROR                                        , 0x86000);


/**********************************************************************************************/
// GROUP:  XML Parser Errors
// 

//XML Parser error: %S
DECLARE_ERROR( ERR_XML_PARSER_ERROR                                        , 0x87000);


/**********************************************************************************************/
// GROUP:  View errors
// 

//View error.
DECLARE_ERROR( ERR_VIEW_ERROR                                              , 0x88000);


/**********************************************************************************************/
// GROUP:  Set
// 

//Set error.
DECLARE_ERROR( ERR_SET_ERROR                                               , 0x89000);


/**********************************************************************************************/
// GROUP:  Methods errors
// 

//Error in function "%S".
DECLARE_ERROR( ERR_METHOD_ERROR                                            , 0x90000);


/**********************************************************************************************/
// GROUP:  Trigger errors
// 

//Trigger error.
DECLARE_ERROR( ERR_TRIGGER_ERROR                                           , 0x91000);


/**********************************************************************************************/
// GROUP:  Stored procedure errors
// 

//Stored procedure error.
DECLARE_ERROR( ERR_SP_ERROR                                                , 0x92000);


/**********************************************************************************************/
// GROUP:  Valentina errors
// 

//Valentina error.
DECLARE_ERROR( ERR_VALENTINA_ERROR                                         , 0x93000);


/**********************************************************************************************/
// GROUP:  Stored function errors
// 

//User defined function error.
DECLARE_ERROR( ERR_UDF_ERROR                                               , 0x94000);


/**********************************************************************************************/
// GROUP:  Report errors
// 

//Cursor is NULL.
DECLARE_ERROR( ERR_REPORT_CURSOR_IS_NULL                                   , 0x95000);


/**********************************************************************************************/
// GROUP:  Type errors
// 

//Type error.
DECLARE_ERROR( ERR_TYPE_ERROR                                              , 0x96000);


#pragma mark -


#pragma mark Warning

/**********************************************************************************************/
// CLASS:  01               Warning
// 

//Cursor operation conflict.
DECLARE_ERROR( ERR_WARNING_CURSOR_OPERATION_CONFLICT                       , 0x01001);   // STD

//Disconnect error.
DECLARE_ERROR( ERR_WARNING_DISCONNECT                                      , 0x01002);   // STD

//Null value eliminated in set function.
DECLARE_ERROR( ERR_WARNING_NULL_VALUE_ELIMINATED_IN_SET_FUNCTION           , 0x01003);   // STD

//String data - right truncation.
DECLARE_ERROR( ERR_WARNING_STRING_DATA_RIGHT_TRUNCATION                    , 0x01004);   // STD

//It is not correct to use compare to NULL. You must use IS (N
//OT) NULL instead.
DECLARE_ERROR( ERR_WARNING_NULL_COMPARE                                    , 0x01501);


#pragma mark Feature Not Supported

/**********************************************************************************************/
// CLASS:  0A               Feature Not Supported
// 

//"%S" - export format is not supported.
DECLARE_ERROR( ERR_FEATURE_NOT_SUPPORTED_EXPORT_FORMAT                     , 0x0A501);

//"%S" - dump format is not supported.
DECLARE_ERROR( ERR_FEATURE_NOT_SUPPORTED_DUMP_FORMAT                       , 0x0A502);

//The empty connection usage is not supported. You have to cre
//ate connection before.
DECLARE_ERROR( ERR_FEATURE_NOT_SUPPORTED_EMPTY_CONNECTION                  , 0x0A503);

//"%S" is not supported. Use "%S".
DECLARE_ERROR( ERR_FEATURE_NOT_SUPPORTED_ADV                               , 0x0A504);


#pragma mark Integrity Constraints errors

/**********************************************************************************************/
// CLASS:  23               Integrity Constraints errors
// 

//Restrict is specified. Dropping is unavailable till constrai
//nts exist.
DECLARE_ERROR( ERR_CONSTRAINT_RESTRICT_VIOLATION                           , 0x23001);   // STD

//The column "%S" in table "%S" does not allow null values.
DECLARE_ERROR( ERR_CONSTRAINT_NOT_NULL_VIOLATION                           , 0x23501);

//Foreign key constraint violation occurred, table name = "%S"
//, constraint name = "%S".
DECLARE_ERROR( ERR_CONSTRAINT_FOREIGN_KEY_VIOLATION                        , 0x23502);

//Unique constraint violation occurred, object "%S", unique in
//dex "%S".
DECLARE_ERROR( ERR_CONSTRAINT_UNIQUE_VIOLATION                             , 0x23503);

//Check constraint violation occurred, table name = "%S", cons
//traint name = "%S".
DECLARE_ERROR( ERR_CONSTRAINT_CHECK_VIOLATION                              , 0x23504);

//Default value does not exist.
DECLARE_ERROR( ERR_CONSTRAINT_DEFAULT_NOT_FOUND                            , 0x23506);

//Expected required property "%S".
DECLARE_ERROR( ERR_CONSTRAINT_EXPECTED_REQUIRED_PROPERTY                   , 0x23507);

//Primary key constraint violation occurred, table name = "%S"
//, constraint name = "%S".
DECLARE_ERROR( ERR_CONSTRAINT_PRIMARY_KEY_VIOLATION                        , 0x23508);

//Attempt of creation of the second primary key, table name = 
//"%S", constraint name = "%S", existing constraint name = "%S
//".
DECLARE_ERROR( ERR_CONSTRAINT_PRIMARY_KEY_ALREADY_DEFINED                  , 0x23509);

//The system already contains constraint with a name "%S".
DECLARE_ERROR( ERR_CONSTRAINT_NAME_NOT_UNIQUE                              , 0x2350A);

//The table "%S" already contains constraint with a name "%S".
DECLARE_ERROR( ERR_CONSTRAINT_BAD_NAME                                     , 0x2350B);

//The table "%S" not contains constraint with a name "%S".
DECLARE_ERROR( ERR_CONSTRAINT_NOT_FOUND                                    , 0x2350C);

//Wrong property type "%S". Must be "%S".
DECLARE_ERROR( ERR_CONSTRAINT_WRONG_PROPERTY_TYPE                          , 0x2350D);

//Field "%S" already unique.
DECLARE_ERROR( ERR_CONSTRAINT_FIELD_ALREADY_UNIQUE                         , 0x2350E);

//Primary key constraint "%S" from table "%S" have foreign key
//(s) - "%S".
DECLARE_ERROR( ERR_CONSTRAINT_PRIMARY_KEY_HAVE_FOREIGN_KEY                 , 0x2350F);

//Field "%S" is already indexed.
DECLARE_ERROR( ERR_CONSTRAINT_FIELD_ALREADY_INDEXED                        , 0x23510);

//Adding column must be nullable or have a DEFAULT definition 
//specified for not empty table. The column "%S" cannot be add
//ed to table "%S" because it does not allow null values and d
//oes not specify a DEFAULT definition.
DECLARE_ERROR( ERR_CONSTRAINT_NOT_NULL_AND_NO_DEFAULT_VALUE_VIOLATION      , 0x23511);


#pragma mark Invalid Transaction State

/**********************************************************************************************/
// CLASS:  25               Invalid Transaction State
// 

//Another transaction is active.
DECLARE_ERROR( ERR_TRANSACTION_STATE_ACTIVE                                , 0x25001);   // STD

//It's not allowed to write during READ_ONLY transaction.
DECLARE_ERROR( ERR_TRANSACTION_STATE_READ_ONLY                             , 0x25501);

//It's not allowed to mix data-definitions and data-manipulati
//ons.
DECLARE_ERROR( ERR_TRANSACTION_STATE_SCHEMA_AND_DATA_STATEMENT_MIXING      , 0x25502);

//The ROLLBACK TRANSACTION request has no corresponding BEGIN 
//TRANSACTION.
DECLARE_ERROR( ERR_TRANSACTION_STATE_NOT_ACTIVE_FOR_CANCEL                 , 0x25503);

//The COMMIT TRANSACTION request has no corresponding BEGIN TR
//ANSACTION.
DECLARE_ERROR( ERR_TRANSACTION_STATE_NOT_ACTIVE_FOR_COMMIT                 , 0x25504);

//No active transaction.
DECLARE_ERROR( ERR_TRANSACTION_STATE_NO_CURRENT_TRANSACTION                , 0x25505);


#pragma mark Transaction Rollback

/**********************************************************************************************/
// CLASS:  40               Transaction Rollback
// 

//Rollback transaction due to the serialization failure.
DECLARE_ERROR( ERR_ROLLBACK_SERIALIZATION_FAILURE                          , 0x40001);   // STD

//Rollback transaction due to the constraint "%S" violation.
DECLARE_ERROR( ERR_ROLLBACK_INTEGRITY_CONSTRAINT_VIOLATION                 , 0x40002);   // STD

//Rollback transaction due to the unknown completion state.
DECLARE_ERROR( ERR_ROLLBACK_STATEMENT_COMPLETION_UNKNOWN                   , 0x40003);   // STD

//Rollback transaction - deadlock is detected.
DECLARE_ERROR( ERR_ROLLBACK_DEADLOCK_DETECTED                              , 0x40501);


#pragma mark Database error

/**********************************************************************************************/
// CLASS:  51               Database error
// 

//Identifier "%S" is not found.
DECLARE_ERROR( ERR_DB_IDENTIFIER_NOT_FOUND                                 , 0x51500);

//DB location is wrong.
DECLARE_ERROR( ERR_DB_LOCATION                                             , 0x51501);

//Database version is "%S". But the current version is "%S".
DECLARE_ERROR( ERR_DB_VERSION                                              , 0x51502);

//Database is read-only.
DECLARE_ERROR( ERR_DB_READ_ONLY                                            , 0x51503);

//Database "%S" is not found.
DECLARE_ERROR( ERR_DB_NOT_FOUND                                            , 0x51504);

//No active database.
DECLARE_ERROR( ERR_DB_NO_ACTIVE_DB                                         , 0x51505);

//Database "%S" already exists.
DECLARE_ERROR( ERR_DATABASE_ALREADY_EXISTS                                 , 0x51506);

//Convert_1_2 error. "%S" - "%S".
DECLARE_ERROR( ERR_CONVERT_DATABASE_ERROR                                  , 0x51507);

//Identifier "%S" is ambiguous.
DECLARE_ERROR( ERR_DATABASE_AMBIGUOUS_IDENTIFIER                           , 0x51508);


#pragma mark Sequence error

/**********************************************************************************************/
// CLASS:  52               Sequence error
// 

//Sequence "%S" not found.
DECLARE_ERROR( ERR_SEQUENCE_NOT_FOUND                                      , 0x52501);

//Sequence name "%S" is not unique.
DECLARE_ERROR( ERR_SEQUENCE_NAME_NOT_UNIQUE                                , 0x52502);

//"%S" is bad sequence name.
DECLARE_ERROR( ERR_SEQUENCE_BAD_NAME                                       , 0x52503);

//Sequence "%S" - next number limit reached.
DECLARE_ERROR( ERR_SEQUENCE_LIMIT_REACHED                                  , 0x52504);

//Sequence "%S" - max-value is less than min-value.
DECLARE_ERROR( ERR_SEQUENCE_BOUNDARY_ERROR                                 , 0x52505);

//Sequence "%S" - unappropriated start value "%S".
DECLARE_ERROR( ERR_SEQUENCE_BAD_START_VALUE                                , 0x52506);

//Sequence "%S" - unappropriated increment value "%S".
DECLARE_ERROR( ERR_SEQUENCE_BAD_INCREMENT_VALUE                            , 0x52507);

//Sequence "%S" - unappropriated current value "%S".
DECLARE_ERROR( ERR_SEQUENCE_BAD_VALUE                                      , 0x52508);

//Sequence "%S" is used by %S.
DECLARE_ERROR( ERR_SEQUENCE_IN_USE                                         , 0x52509);


#pragma mark Insufficient Resources

/**********************************************************************************************/
// CLASS:  53               Insufficient Resources
// 

//Disk full.
DECLARE_ERROR( ERR_INSUFFICIENT_DISKSPACE                                  , 0x53501);

//Out of memory.
DECLARE_ERROR( ERR_INSUFFICIENT_MEMORY                                     , 0x53502);

//Cache is too small.
DECLARE_ERROR( ERR_INSUFFICIENT_CACHE                                      , 0x53503);


#pragma mark OS system Errors

/**********************************************************************************************/
// CLASS:  54               OS system Errors
// 

//Invalid parameter value was specified in "%S" position.
DECLARE_ERROR( ERR_EXTERNAL_INVALID_PARAMETER                              , 0x54501);

//External std-error: "%S".
DECLARE_ERROR( ERR_EXTERNAL_STD                                            , 0x54502);


#pragma mark Interrupt process

/**********************************************************************************************/
// CLASS:  57               Interrupt process
// 

//Qerry has been canceled due to your request.
DECLARE_ERROR( ERR_INTERRUPT_QUERY                                         , 0x57501);

//Column name "%S" appears more than once in the result column
// list.
DECLARE_ERROR( ERR_DUPLICATE_COLUMN                                        , 0x57502);


#pragma mark Shutdown system

/**********************************************************************************************/
// CLASS:  58               Shutdown system
// 

//System is shutting down due to admin request.
DECLARE_ERROR( ERR_SHUTDOWN_ADMIN                                          , 0x58502);

//System is shutting down - crash was detected.
DECLARE_ERROR( ERR_SHUTDOWN_CRASH                                          , 0x58503);

//Unable to connect. Try later please.
DECLARE_ERROR( ERR_SHUTDOWN_CANNOT_CONNECT_NOW                             , 0x58504);


#pragma mark OS File system Errors

/**********************************************************************************************/
// CLASS:  59               OS File system Errors
// 

//File "%S" cannot be opened because it is used by another app
//lication.
DECLARE_ERROR( ERR_OS_FILE_BUSY                                            , 0x59501);

//File "%S" does not exist.
DECLARE_ERROR( ERR_OS_FILE_NOT_FOUND                                       , 0x59502);

//File "%S" already exists.
DECLARE_ERROR( ERR_OS_FILE_NAME_NOT_UNIQUE                                 , 0x59503);

//File "%S" is already open.
DECLARE_ERROR( ERR_OS_FILE_OPEN                                            , 0x59504);

//File "%S" is not open.
DECLARE_ERROR( ERR_OS_FILE_NOT_OPEN                                        , 0x59505);

//"%S" - EOF reached.
DECLARE_ERROR( ERR_OS_FILE_EOF                                             , 0x59506);

//"%S" - BOF reached.
DECLARE_ERROR( ERR_OS_FILE_BOF                                             , 0x59507);

//File "%S" - is read only.
DECLARE_ERROR( ERR_OS_FILE_READ_ONLY                                       , 0x59508);

//File "%S" is not Valentina2 database.
DECLARE_ERROR( ERR_OS_FILE_NOT_VALENTINA_DATABASE                          , 0x59509);

//Folder "%S" could not be created, error "%S".
DECLARE_ERROR( ERR_CREATE_FOLDER                                           , 0x59510);

//Folder "%S" does not exist.
DECLARE_ERROR( ERR_OS_FOLDER_NOT_FOUND                                     , 0x59511);


#pragma mark Stream errors

/**********************************************************************************************/
// CLASS:  60               Stream errors
// 

//Stream EOF reached.
DECLARE_ERROR( ERR_STREAM_EOF                                              , 0x60508);

//Stream BOF reached.
DECLARE_ERROR( ERR_STREAM_BOF                                              , 0x60509);

//Stream read error.
DECLARE_ERROR( ERR_STREAM_READ_ERROR                                       , 0x6050A);

//"%S" - write error.
DECLARE_ERROR( ERR_STREAM_WRITE_ERROR                                      , 0x6050B);

//"%S" - would be blocked.
DECLARE_ERROR( ERR_STREAM_WOULD_BLOCK                                      , 0x6050C);

//"%S" - not all data is available.
DECLARE_ERROR( ERR_STREAM_PARTIAL_DATA                                     , 0x6050D);


#pragma mark Encryption errors

/**********************************************************************************************/
// CLASS:  61               Encryption errors
// 

//Object is not encrypted.
DECLARE_ERROR( ERR_ENCRYPTION_NOT_ENCRYPTED                                , 0x61501);

//Specified encryption key is wrong.
DECLARE_ERROR( ERR_ENCRYPTION_WRONG_ENCRYPTION_KEY                         , 0x61502);

//Encryption key overriding not allowed for child or parent ob
//jects.
DECLARE_ERROR( ERR_ENCRYPTION_KEY_OVERRIDING_NOT_ALLOWED                   , 0x61503);

//Object is not an encryption root.
DECLARE_ERROR( ERR_ENCRYPTION_NOT_ROOT_OBJECT                              , 0x61504);

//Object can not be encrypted or decrypted at the moment.
DECLARE_ERROR( ERR_ENCRYPTION_NOT_EXCLUSIVE_ACCESS                         , 0x61505);


#pragma mark Values errors

/**********************************************************************************************/
// CLASS:  62               Values errors
// 

//Date value "%S" is invalid. Illegal symbol at "%S" position.
DECLARE_ERROR( ERR_DATE_VALUE_NOT_MATCH_FORMAT                             , 0x62501);

//Date value "%S" is invalid. Boundary check error.
DECLARE_ERROR( ERR_DATE_VALUE_HAVE_WRONG_NUMBERS                           , 0x62502);

//Time value "%S" is invalid. Illegal symbol at "%S" position.
DECLARE_ERROR( ERR_TIME_VALUE_NOT_MATCH_FORMAT                             , 0x62503);

//Time value "%S" is invalid. Boundary check error.
DECLARE_ERROR( ERR_TIME_VALUE_HAVE_WRONG_NUMBERS                           , 0x62504);

//Date-time value "%S" is invalid. Illegal symbol at "%S" posi
//tion.
DECLARE_ERROR( ERR_DATETIME_VALUE_NOT_MATCH_FORMAT                         , 0x62505);

//Date-time value "%S" is invalid. Boundary check error.
DECLARE_ERROR( ERR_DATETIME_VALUE_HAVE_WRONG_NUMBERS                       , 0x62506);

//Sql-state value "%S" is invalid. It must be valid 5-digits h
//ex number.
DECLARE_ERROR( ERR_SQLSTATE_VALUE_INVALID                                  , 0x62507);

//Buffer is not enough to fit the value "%S".
DECLARE_ERROR( ERR_VALUE_BUFFER_OVERFLOW                                   , 0x62508);

//Value "%S" is invalid for type "%S".
DECLARE_ERROR( ERR_ENUM_VALUE_INVALID                                      , 0x62509);


#pragma mark SSL errors

/**********************************************************************************************/
// CLASS:  63               SSL errors
// 

//SSL certificate error: "%S".
DECLARE_ERROR( ERR_SSL_CERTIFICATE_VALIDATION                              , 0x63501);


#pragma mark Bonjour errors

/**********************************************************************************************/
// CLASS:  64               Bonjour errors
// 

//Bonjour service error.
DECLARE_ERROR( ERR_BONJOUR_SERVICE_ERROR                                   , 0x64501);

//Bonjour socket error.
DECLARE_ERROR( ERR_BONJOUR_SOCKET_ERROR                                    , 0x64502);

//Bonjour socket timeout.
DECLARE_ERROR( ERR_BONJOUR_SOCKET_TIMEOUT_ERROR                            , 0x64503);

//Bonjour thread error.
DECLARE_ERROR( ERR_BONJOUR_THREAD_ERROR                                    , 0x64504);

//Bonjour name in use, please choose another one.
DECLARE_ERROR( ERR_BONJOUR_NAME_IN_USE_ERROR                               , 0x64505);

//Bonjour registration error.
DECLARE_ERROR( ERR_BONJOUR_REGISTRATION_ERROR                              , 0x64506);

//Wrong serial number.
DECLARE_ERROR( ERR_BONJOUR_SERIAL_NUMBER_ERROR                             , 0x64507);


#pragma mark Picture errors

/**********************************************************************************************/
// CLASS:  65               Picture errors
// 

//Unsupported picture format.
DECLARE_ERROR( ERR_PICTURE_UNKNOWN_TYPE                                    , 0x65501);

//Unknown picture error.
DECLARE_ERROR( ERR_PICTURE_UNKNOWN_ERROR                                   , 0x65502);


#pragma mark KeyValue error

/**********************************************************************************************/
// CLASS:  69               KeyValue error
// 

//"%S" is bad KeyValue name.
DECLARE_ERROR( ERR_KEYVALUE_BAD_NAME                                       , 0x69501);

//KeyValue "%S" not found.
DECLARE_ERROR( ERR_KEYVALUE_NOT_FOUND                                      , 0x69503);

//KeyValue "%S" is not unique.
DECLARE_ERROR( ERR_KEYVALUE_NAME_NOT_UNIQUE                                , 0x69506);

//KeyValue "%S" - unappropriated key "%S" (%S).
DECLARE_ERROR( ERR_KEYVALUE_BAD_KEY                                        , 0x69507);

//KeyValue "%S" - key "%S" not found.
DECLARE_ERROR( ERR_KEYVALUE_KEY_NOT_FOUND                                  , 0x69508);

//KeyValue "%S" - not unique key "%S".
DECLARE_ERROR( ERR_KEYVALUE_NOT_UNIQUE_KEY                                 , 0x69509);


#pragma mark Table error

/**********************************************************************************************/
// CLASS:  70               Table error
// 

//Table "%S" is empty.
DECLARE_ERROR( ERR_TABLE_EMPTY                                             , 0x70501);

//"%S" is bad table name.
DECLARE_ERROR( ERR_TABLE_BAD_NAME                                          , 0x70502);

//Table "%S" not found.
DECLARE_ERROR( ERR_TABLE_NOT_FOUND                                         , 0x70503);

//Record "%S" does not exist in table "%S".
DECLARE_ERROR( ERR_TABLE_RECORD_NOT_FOUND                                  , 0x70504);

//Record "%S" is locked in table "%S".
DECLARE_ERROR( ERR_TABLE_RECORD_LOCKED                                     , 0x70505);

//Table name "%S" is not unique.
DECLARE_ERROR( ERR_TABLE_NAME_NOT_UNIQUE                                   , 0x70506);

//The column prefix "%S" does not match with a table name or a
//lias name used in the query.
DECLARE_ERROR( ERR_WRONG_TABLENAME_USED                                    , 0x70507);

//The table "%S" is used by %S.
DECLARE_ERROR( ERR_TABLE_IN_USE                                            , 0x70508);

//The table "%S" could not be created because of inconsistent 
//flags "%S".
DECLARE_ERROR( ERR_TABLE_INCONSISTENT_FLAGS                                , 0x70509);


#pragma mark Fields errors.

/**********************************************************************************************/
// CLASS:  80               Fields errors.
// 

//Field name "%S" is not unique.
DECLARE_ERROR( ERR_FIELD_NAME_NOT_UNIQUE                                   , 0x80501);

//Bad field name "%S".
DECLARE_ERROR( ERR_FIELD_BAD_NAME                                          , 0x80502);

//Field "%S" is not indexed.
DECLARE_ERROR( ERR_FIELD_NOT_INDEXED                                       , 0x80503);

//Field "%S" is calculated.
DECLARE_ERROR( ERR_FIELD_IS_CALCULATED                                     , 0x80504);

//Field "%S" is composed.
DECLARE_ERROR( ERR_FIELD_IS_COMPOSED                                       , 0x80505);

//Field "%S" is unique.
DECLARE_ERROR( ERR_FIELD_UNIQUE                                            , 0x80506);

//Field "%S" is method.
DECLARE_ERROR( ERR_FIELD_IS_NOT_METHOD                                     , 0x80507);

//Can't create field "%S".
DECLARE_ERROR( ERR_FIELD_CANT_BE_CREATED                                   , 0x80508);

//Field "%S" - language "%S" not found.
DECLARE_ERROR( ERR_FIELD_LANGUAGE_NOT_FOUND                                , 0x80509);

//Field "%S" - wrong type "%S".
DECLARE_ERROR( ERR_FIELD_WRONG_TYPE                                        , 0x8050A);

//Field "%S" does not exist.
DECLARE_ERROR( ERR_FIELD_NOT_FOUND                                         , 0x8050B);

//Field "%S" is used by some method(s).
DECLARE_ERROR( ERR_FIELD_METHOD_DEPENDS                                    , 0x8050C);

//Can't modify field "%S" to be a method.
DECLARE_ERROR( ERR_FIELD_CANT_BE_METHOD                                    , 0x8050D);

//Field "%S": value was not prepared for Update.
DECLARE_ERROR( ERR_FIELD_VALUE_NOT_PREPARED_FOR_UPDATE                     , 0x8050E);

//Field "%S", attribute "%S" is not matched with schema-stored
// attribute.
DECLARE_ERROR( ERR_FIELD_WRONG_ATTRIBUTE                                   , 0x8050F);

//Field "%S". Temporary flag is allowed for methods only.
DECLARE_ERROR( ERR_FIELD_WRONG_TMP_FLAG                                    , 0x80510);

//You have specify too big maximal length for VarChar field "%
//S".
DECLARE_ERROR( ERR_FIELD_MAX_LENGTH_TOO_BIG                                , 0x80511);

//Field "%S" is used by %S.
DECLARE_ERROR( ERR_FIELD_IN_USE                                            , 0x80512);

//Can't drop field "%S".
DECLARE_ERROR( ERR_FIELD_CANT_BE_DROPPED                                   , 0x80513);

//Default expression for field "%S" can not depend on any fiel
//d.
DECLARE_ERROR( ERR_FIELD_WRONG_DEFAULT_EXPRESSION                          , 0x80514);


#pragma mark Link errors.

/**********************************************************************************************/
// CLASS:  81               Link errors.
// 

//Link name "%S" already exists.
DECLARE_ERROR( ERR_LINK_NAME_NOT_UNIQUE                                    , 0x81501);

//Link with name "%S" not found.
DECLARE_ERROR( ERR_LINK_NOT_FOUND                                          , 0x81502);

//Compaund key's fields must be presented in the single table.
DECLARE_ERROR( ERR_LINK_FIELDS_FROM_DIFFERENT_TABLES                       , 0x81503);

//The link "%S" is broken. Linked record is not found.
DECLARE_ERROR( ERR_LINKED_RECORD_NOT_FOUND                                 , 0x81504);

//The table "%S" is not used in link "%S".
DECLARE_ERROR( ERR_LINK_WRONG_TABLE                                        , 0x81505);

//The table "%S" is can not be owner of the link "%S".
DECLARE_ERROR( ERR_LINK_WRONG_OWNER                                        , 0x81506);

//Error in link name "%S".
DECLARE_ERROR( ERR_LINK_BAD_NAME                                           , 0x81507);

//The field "%S" is not able to point to the "%S" field becaus
//e of ptr-field type.
DECLARE_ERROR( ERR_LINK_BAD_PTR_TYPE                                       , 0x81508);

//The field "%S" is not able to point to the "%S" field becaus
//e of ptr-field size.
DECLARE_ERROR( ERR_LINK_BAD_PTR_SIZE                                       , 0x81509);

//Referential action SET NULL can't be applied to the not null
//able field "%S".
DECLARE_ERROR( ERR_LINK_PTR_NOT_NULLABLE                                   , 0x81510);

//Key field "%S" must have unique flag.
DECLARE_ERROR( ERR_LINK_KEY_NOT_UNIQUE                                     , 0x81511);

//Key field "%S" must be indexed.
DECLARE_ERROR( ERR_LINK_KEY_NOT_INDEXED                                    , 0x81512);

//Pointer field "%S" must be indexed.
DECLARE_ERROR( ERR_LINK_PTR_NOT_INDEXED                                    , 0x81513);

//The link(s) is not found between "%S" tables.
DECLARE_ERROR( ERR_LINK_TABLES_NOT_LINKED                                  , 0x81514);

//Some tables are linked more than one way - ambiguity.
DECLARE_ERROR( ERR_LINK_LINKS_AMBIGUITY                                    , 0x81515);

//Link "%S" - wrong type "%S".
DECLARE_ERROR( ERR_LINK_WRONG_TYPE                                         , 0x81516);

//The link "%S". Left-table record "%S" is not linked to the r
//ight-table record "%S".
DECLARE_ERROR( ERR_LINKED_RECORDS_NOT_LINKED                               , 0x81517);

//The link "%S". Left-table record "%S" is already linked to t
//he right-table record "%S".
DECLARE_ERROR( ERR_LINKED_RECORDS_ALREADY_LINKED                           , 0x81518);

//The link "%S". kMany-table's record "%S" is already linked t
//o some kOne-table's record.
DECLARE_ERROR( ERR_LINK_POWER_VIOLATION                                    , 0x81519);

//The link "%S". kMany-table's record "%S" can't be linked to 
//"%S" kOne-table's record. Key can not be NULL.
DECLARE_ERROR( ERR_LINK_TO_NULL                                            , 0x81520);

//The link "%S" refuses operation.
DECLARE_ERROR( ERR_LINK_RESTRICT_VIOLATION                                 , 0x81521);

//Link "%S" - wrong OnDelete behavior.
DECLARE_ERROR( ERR_LINK_WRONG_ON_DELETE_FLAG                               , 0x81522);

//Link "%S" - wrong OnUpdate behavior.
DECLARE_ERROR( ERR_LINK_WRONG_ON_UPDATE_FLAG                               , 0x81523);

//The ptr field "%S" value stored in record "%S" not found in 
//key field "%S". Records could not be linked.
DECLARE_ERROR( ERR_LINK_NO_KEY_VALUE_FOUND_RECORDS_COULD_NOT_BE_LINKED     , 0x81524);

//The link(s) "%S" could not be converted to "%S".
DECLARE_ERROR( ERR_LINK_CONVERT                                            , 0x81525);

//The link(s) "%S" could not be converted to "%S". Target link
//(s) type must be 1::M or 1::1.
DECLARE_ERROR( ERR_LINK_CONVERT_TARGET_LINKS_TYPE                          , 0x81526);

//The link(s) "%S" could not be converted to "%S". Source link
//(s) type must be 1::M or 1::1.
DECLARE_ERROR( ERR_LINK_CONVERT_SOURCE_LINK_TYPE                           , 0x81527);

//The link(s) "%S" could not be converted to "%S". Source and 
//target links must link the same tables.
DECLARE_ERROR( ERR_LINK_CONVERT_DIFFERENT_TABLES                           , 0x81528);

//The link(s) "%S" could not be converted to "%S". Target link
//(s) is not empty.
DECLARE_ERROR( ERR_LINK_CONVERT_TARGET_LINK_NOT_EMPTY                      , 0x81529);

//The link(s) "%S" could not be converted to "%S". Target link
// key-field is method.
DECLARE_ERROR( ERR_LINK_CONVERT_TARGET_KEY_METHOD                          , 0x81530);

//The link(s) "%S" could not be converted to "%S". Target link
// ptr-field is method.
DECLARE_ERROR( ERR_LINK_CONVERT_TARGET_PTR_METHOD                          , 0x81531);

//The link(s) "%S" could not be converted to "%S". Target link
// must be M::M.
DECLARE_ERROR( ERR_LINK_CONVERT_TARGET_MUSTBE_MM                           , 0x81532);

//The link(s) "%S" could not be converted to "%S". Source link
// must be M::M.
DECLARE_ERROR( ERR_LINK_CONVERT_SOURCE_MUSTBE_MM                           , 0x81533);

//The link(s) "%S" could not be converted to "%S". Target link
//s are not corresponded.
DECLARE_ERROR( ERR_LINK_CONVERT_TARGET_LINKS_NOT_CORRESPONDED              , 0x81534);

//The link(s) "%S" could not be converted to "%S". Source link
//s are not corresponded.
DECLARE_ERROR( ERR_LINK_CONVERT_SOURCE_LINKS_NOT_CORRESPONDED              , 0x81535);

//The link(s) "%S" could not be established between tables of 
//different kind.
DECLARE_ERROR( ERR_LINK_TABLES_KIND_NOT_CORRESPONDED                       , 0x81536);

//The link "%S" could not be created because of inconsistent f
//lags "%S".
DECLARE_ERROR( ERR_LINK_INCONSISTENT_FLAGS                                 , 0x81537);

//The link "%S" could not be created because of inconsistent s
//torage kind "%S".
DECLARE_ERROR( ERR_LINK_INCONSISTENT_STORAGE_KIND                          , 0x81538);

//The link "%S" must be recursive.
DECLARE_ERROR( ERR_LINK_MUST_BE_RECURSIVE                                  , 0x81539);

//The link "%S" with order can not be of 1:1 type.
DECLARE_ERROR( ERR_LINK_WITH_ORDER_CANNOT_BE_11                            , 0x81540);


#pragma mark Connection errors.

/**********************************************************************************************/
// CLASS:  82               Connection errors.
// 

//Connection limit reached.
DECLARE_ERROR( ERR_CONNECTION_LIMIT                                        , 0x82501);

//Protocol version is too new.
DECLARE_ERROR( ERR_CONNECTION_PROTOCOL_VERSION_IS_TOO_NEW                  , 0x82502);

//Invalid user name or password.
DECLARE_ERROR( ERR_CONNECTION_INVALID_USER_NAME_OR_PASSWORD                , 0x82503);

//"%S" invalid database name.
DECLARE_ERROR( ERR_CONNECTION_INVALID_DATABASE_NAME                        , 0x82504);

//Command "%S" is out of sync.
DECLARE_ERROR( ERR_CONNECTION_COMMAND_OUT_OF_SYNC                          , 0x82507);

//Current database not set.
DECLARE_ERROR( ERR_CONNECTION_NO_CURRENT_DB                                , 0x82508);

//Connection timed out.
DECLARE_ERROR( ERR_CONNECTION_TIMED_OUT                                    , 0x82509);

//Wrong deployment serial.
DECLARE_ERROR( ERR_CONNECTION_WRONG_DEPLOYMENT_SERIAL                      , 0x8250A);

//Connection forcedly closed.
DECLARE_ERROR( ERR_CONNECTION_FORCEDLY_CLOSED                              , 0x8250B);

//Unknown connection error.
DECLARE_ERROR( ERR_CONNECTION_UNKNOWN                                      , 0x8250D);

//Invalid property name specified while accessing server confi
//guration property value.
DECLARE_ERROR( ERR_CONNECTION_INVALID_PROPERTY_NAME                        , 0x8250E);

//Access denied.
DECLARE_ERROR( ERR_CONNECTION_ACCESS_DENIED                                , 0x8250F);

//Database with name "%S" already exists on the server.
DECLARE_ERROR( ERR_CONNECTION_DATABASE_ALREADY_EXISTS                      , 0x82510);

//User with name "%S" already registered on the server.
DECLARE_ERROR( ERR_CONNECTION_USER_ALREADY_EXISTS                          , 0x82511);

//Internal server error.
DECLARE_ERROR( ERR_CONNECTION_INTERNAL_SERVER_ERROR                        , 0x82512);

//An invalid identifier (%S) was specified while processing cl
//ient request.
DECLARE_ERROR( ERR_CONNECTION_INVALID_IDENTIFIER                           , 0x82513);

//Received packet's version is inconsistent.
DECLARE_ERROR( ERR_CONNECTION_INCONSISTENT_RECEIVED_PACKET_VERSION         , 0x82514);

//Received packet is broken.
DECLARE_ERROR( ERR_CONNECTION_BROKEN_RECEIVED_PACKET                       , 0x82515);

//SSL libraries not found.
DECLARE_ERROR( ERR_LOAD_SSL_LIBRARIES_ERROR                                , 0x82516);

//Database with name "%S" must be opened or created before ope
//ration.
DECLARE_ERROR( ERR_CONNECTION_DATABASE_NOT_OPENED                          , 0x82517);

//User "%S" can not be removed by himself.
DECLARE_ERROR( ERR_CONNECTION_USER_NOT_ALLOWED_REMOVE_SELF                 , 0x82518);

//Operation is refused. User has no '"%S"' privilege.
DECLARE_ERROR( ERR_CONNECTION_OPERATION_REFUSED                            , 0x82519);

//User '"%S"' is not registered to this server.
DECLARE_ERROR( ERR_CONNECTION_USER_NOT_EXISTS                              , 0x82520);

//Operation '"%S"' is not allowed for local-mode.
DECLARE_ERROR( ERR_CONNECTION_OPERATION_NOT_ALLOWED                        , 0x82521);

//Connection is refused according to ACL rules.
DECLARE_ERROR( ERR_CONNECTION_OPERATION_REFUSED_ACL                        , 0x82522);


#pragma mark Index errors.

/**********************************************************************************************/
// CLASS:  83               Index errors.
// 

//Index "%S" is corrupted. Please reindex.
DECLARE_ERROR( ERR_INDEX_CORRUPTED                                         , 0x83500);

//Inventory corrupted for index "%S". Please reindex.
DECLARE_ERROR( ERR_INDEX_PAGE_INVENTORY_CORRUPTED                          , 0x83501);

//Index "%S" page is corrupted. Please reindex.
DECLARE_ERROR( ERR_INDEX_PAGE_CORRUPTED                                    , 0x83502);

//Index "%S" byte rec-list is corrupted. Please reindex.
DECLARE_ERROR( ERR_INDEX_BYTE_RECLIST_CORRUPTED                            , 0x83503);

//Unique violation for index "%S".
DECLARE_ERROR( ERR_INDEX_UNIQUE_VIOLATION                                  , 0x83504);

//Index is not sorted.
DECLARE_ERROR( ERR_INDEX_NOT_SORTED                                        , 0x83505);

//Index "%S" is failed to build.
DECLARE_ERROR( ERR_INDEX_BUILD                                             , 0x83506);

//Index "%S" not found.
DECLARE_ERROR( ERR_INDEX_NOT_FOUND                                         , 0x83507);


#pragma mark Index style errors.

/**********************************************************************************************/
// CLASS:  84               Index style errors.
// 

//IndexPrefs name "%S" is not unique.
DECLARE_ERROR( ERR_INDEXPREFS_NAME_NOT_UNIQUE                              , 0x84501);


#pragma mark Licence errors.

/**********************************************************************************************/
// CLASS:  85               Licence errors.
// 

//Licence file "%S" is invalid.
DECLARE_ERROR( ERR_LICENCE_INVALID                                         , 0x85501);

//Licence file "%S" is expired.
DECLARE_ERROR( ERR_LICENCE_EXPIRED                                         , 0x85502);


#pragma mark Compressor errors.

/**********************************************************************************************/
// CLASS:  86               Compressor errors.
// 

//Zip compressor error: "%S".
DECLARE_ERROR( ERR_ZIP_COMPRESSOR_ERROR                                    , 0x86501);


#pragma mark XML Parser errors.

/**********************************************************************************************/
// CLASS:  87               XML Parser errors.
// 

//Column name "%S" is repeated. The same attribute cannot be g
//enerated more than once on the same XML tag.
DECLARE_ERROR( ERR_XML_ATTRIBUTE_NAME_NOT_UNIQUE                           , 0x87501);


#pragma mark View error

/**********************************************************************************************/
// CLASS:  88               View error
// 

//View "%S" not found.
DECLARE_ERROR( ERR_VIEW_NOT_FOUND                                          , 0x88501);

//View name "%S" is not unique.
DECLARE_ERROR( ERR_VIEW_NAME_NOT_UNIQUE                                    , 0x88502);

//"%S" is bad view name.
DECLARE_ERROR( ERR_VIEW_BAD_NAME                                           , 0x88503);

//View "%S" has fewer columns than were specified in the colum
//n list.
DECLARE_ERROR( ERR_VIEW_COLUMNS_TOO_FEW                                    , 0x88504);

//View "%S" has more columns than were specified in the column
// list.
DECLARE_ERROR( ERR_VIEW_COLUMNS_TOO_MUCH                                   , 0x88505);

//View name "%S" is read only since no appropriate instead-of 
//trigger found.
DECLARE_ERROR( ERR_VIEW_READONLY                                           , 0x88506);

//View "%S" Column "%S" is not unique.
DECLARE_ERROR( ERR_VIEW_COLUMN_NAME_NOT_UNIQUE                             , 0x88507);


#pragma mark Set errors.

/**********************************************************************************************/
// CLASS:  89               Set errors.
// 

//Size of BitSets must be equal.
DECLARE_ERROR( ERR_BITSETS_SIZE_NOT_EQUAL_ERROR                            , 0x89501);

//ArraySet size can not be bigger than size of BitSet.
DECLARE_ERROR( ERR_ARRAYSET_BIGGER_THAN_BITSET_ERROR                       , 0x89502);

//Inappropriate object type. "%S" is expected.
DECLARE_ERROR( ERR_INAPPROPRIATE_SET_OBJECT_ERROR                          , 0x89503);


#pragma mark Methods errors

/**********************************************************************************************/
// CLASS:  90               Methods errors
// 

//Wrong language in function "%S".
DECLARE_ERROR( ERR_METHOD_WRONG_LANGUAGE                                   , 0x90501);

//Left operand missing in function "%S".
DECLARE_ERROR( ERR_METHOD_LEFT_OPERAND_MISSING                             , 0x90502);

//Right operand missing in function "%S".
DECLARE_ERROR( ERR_METHOD_RIGHT_OPERAND_MISSING                            , 0x90503);

//Function "%S" - bad expression.
DECLARE_ERROR( ERR_METHOD_BAD_EXPRESSION                                   , 0x90504);

//Function "%S" - wrong database ref.
DECLARE_ERROR( ERR_METHOD_WRONG_DB_REF                                     , 0x90505);

//Function "%S" - wrong base object ref.
DECLARE_ERROR( ERR_METHOD_WRONG_BASEOBJECT_REF                             , 0x90506);

//Function "%S" - wrong field ref.
DECLARE_ERROR( ERR_METHOD_WRONG_FIELD_REF                                  , 0x90507);

//Function "%S" - wrong cursor ref.
DECLARE_ERROR( ERR_METHOD_WRONG_CURSOR_REF                                 , 0x90508);

//Function "%S" - out of range.
DECLARE_ERROR( ERR_METHOD_OUT_OF_RANGE                                     , 0x90509);

//Function "%S" - must not to be called.
DECLARE_ERROR( ERR_METHOD_FUNC_MUST_NOT_BE_CALLED                          , 0x9050A);

//Function "%S" - wrong param "%S" value.
DECLARE_ERROR( ERR_METHOD_WRONG_PARAM_VALUE                                , 0x9050B);

//Function "%S" - wrong param count. Function requires at leas
//t "%S" arguments.
DECLARE_ERROR( ERR_METHOD_PARAMS_TOO_FEW                                   , 0x9050C);

//Function "%S" - wrong param count. Function requires not mor
//e than "%S" arguments.
DECLARE_ERROR( ERR_METHOD_PARAMS_TOO_MUCH                                  , 0x9050D);

//Error in function name "%S".
DECLARE_ERROR( ERR_METHOD_BAD_NAME                                         , 0x9050E);

//Function name "%S" is not unique.
DECLARE_ERROR( ERR_METHOD_NAME_NOT_UNIQUE                                  , 0x9050F);

//Identifier "%S" is ambiguous. Found as a field in "%S" table
// and as a link.
DECLARE_ERROR( ERR_METHOD_AMBIGUOUS_IDENTIFIER                             , 0x90510);


#pragma mark Trigger error

/**********************************************************************************************/
// CLASS:  91               Trigger error
// 

//Trigger "%S" not found.
DECLARE_ERROR( ERR_TRIGGER_NOT_FOUND                                       , 0x91501);

//Trigger name "%S" is not unique.
DECLARE_ERROR( ERR_TRIGGER_NAME_NOT_UNIQUE                                 , 0x91502);

//"%S" is bad trigger name.
DECLARE_ERROR( ERR_TRIGGER_BAD_NAME                                        , 0x91503);

//Trigger "%S": time "%S" is not supported in this context.
DECLARE_ERROR( ERR_TRIGGER_TIME                                            , 0x91504);

//Trigger "%S": action "%S" is not supported in this context.
DECLARE_ERROR( ERR_TRIGGER_ACTION                                          , 0x91505);

//Trigger "%S": action "%S" for table "%S" - already registere
//d.
DECLARE_ERROR( ERR_TRIGGER_EXISTS                                          , 0x91506);

//Trigger "%S": "%S" alias is not allowed for action "%S".
DECLARE_ERROR( ERR_TRIGGER_ALIAS_ERROR                                     , 0x91507);


#pragma mark Stored procedure error

/**********************************************************************************************/
// CLASS:  92               Stored procedure error
// 

//Stored procedure "%S" not found.
DECLARE_ERROR( ERR_SP_NOT_FOUND                                            , 0x92501);

//Stored procedure name "%S" is not unique.
DECLARE_ERROR( ERR_SP_NAME_NOT_UNIQUE                                      , 0x92502);

//"%S" is bad stored procedure name.
DECLARE_ERROR( ERR_SP_BAD_NAME                                             , 0x92503);

//"%S" can not be thrown by user.
DECLARE_ERROR( ERR_SP_RAISE_ERROR                                          , 0x92504);

//"%S" must have default value.
DECLARE_ERROR( ERR_SP_NO_DEFAULT_ARGUMENT_VALUE_ERROR                      , 0x92505);


#pragma mark Valentina error

/**********************************************************************************************/
// CLASS:  93               Valentina error
// 

//"%S" name is already defined.
DECLARE_ERROR( ERR_VALENTINA_PARAM_NAME_ALREADY_EXISTS                     , 0x93501);

//Serial is correct, but its subscription period is expired. Y
//ou need upgrade your subscription to use builds after this d
//ate.
DECLARE_ERROR( ERR_VALENTINA_SERIAL_EXPIRED                                , 0x93502);

//"%S" is system varaible. Assignment is not allowed.
DECLARE_ERROR( ERR_VALENTINA_ASSIGN_TO_SYSTEM_VARIABLE_ERROR               , 0x93503);

//Valentina is already initialized.
DECLARE_ERROR( ERR_VALENTINA_ALREADY_INITIALIZED                           , 0x93504);

//Format error: "%S" .
DECLARE_ERROR( ERR_VALENTINA_FORMAT_ERROR                                  , 0x93505);


#pragma mark Stored function error

/**********************************************************************************************/
// CLASS:  94               Stored function error
// 

//User defined function "%S": not supported return type.
DECLARE_ERROR( ERR_UDF_NOT_SUPPORTED_RETURN_TYPE                           , 0x94501);

//User defined function "%S": Error - mask standard function i
//s not allowed.
DECLARE_ERROR( ERR_UDF_MASK_STANDARD_FUNCTION                              , 0x94502);

//User defined function "%S" is not unique.
DECLARE_ERROR( ERR_UDF_NAME_NOT_UNIQUE                                     , 0x94503);


#pragma mark Report error

/**********************************************************************************************/
// CLASS:  95               Report error
// 

//Report with name "%S" is not found in project "%S".
DECLARE_ERROR( ERR_REPORT_NOT_FOUND_IN_PROJECT                             , 0x95501);

//Wrong preview page index.
DECLARE_ERROR( ERR_REPORT_WRONG_PREVIEW_PAGE_INDEX                         , 0x95502);

//Wrong scale value.
DECLARE_ERROR( ERR_REPORT_WRONG_SCALE_VALUE                                , 0x95503);

//Wrong preview width.
DECLARE_ERROR( ERR_REPORT_PREVIEW_WIDTH                                    , 0x95504);

//Wrong preview height.
DECLARE_ERROR( ERR_REPORT_WRONG_PREVIEW_HEIGHT                             , 0x95505);

//File "%S" not found.
DECLARE_ERROR( ERR_REPORT_FILE_NOT_FOUND                                   , 0x95506);

//Project "%S" not found.
DECLARE_ERROR( ERR_PROJECT_NOT_FOUND                                       , 0x95507);

//Unknown datasource prefix: "%S".
DECLARE_ERROR( ERR_REPORT_UNKNOWN_DATASOURCE                               , 0x95508);

//Can't establish SSH tunnel. Error: "%S".
DECLARE_ERROR( ERR_REPORT_SSH_TUNNEL                                       , 0x95509);

//Can't get the list of reports. Error: "%S".
DECLARE_ERROR( ERR_REPORT_GET_LIST                                         , 0x95510);

//Report with index "%S" is not found in project "%S".
DECLARE_ERROR( ERR_REPORT_BY_INDEX_NOT_FOUND_IN_PROJECT                    , 0x95511);

//Report structure is not loaded.
DECLARE_ERROR( ERR_REPORT_STRUCTURE_NOT_LOADED                             , 0x95512);

//Default source query of report is not loaded.
DECLARE_ERROR( ERR_REPORT_DEFAULT_SOURCE_QUERY_NOT_LOADED                  , 0x95513);

//Datasource error: "%S".
DECLARE_ERROR( ERR_REPORT_DATASOURCE                                       , 0x95514);


#pragma mark Type error

/**********************************************************************************************/
// CLASS:  96               Type error
// 

//Type "%S" not found.
DECLARE_ERROR( ERR_TYPE_NOT_FOUND                                          , 0x96501);

//Type name "%S" is not unique.
DECLARE_ERROR( ERR_TYPE_NAME_NOT_UNIQUE                                    , 0x96502);

//"%S" is bad type name.
DECLARE_ERROR( ERR_TYPE_BAD_NAME                                           , 0x96503);

//Type "%S" - unknown type category.
DECLARE_ERROR( ERR_TYPE_UNKNOWN_CATEGORY                                   , 0x96504);

//Base type for type "%S" is not found.
DECLARE_ERROR( ERR_TYPE_BASETYPE_NOT_FOUND                                 , 0x96505);

//Type "%S" has descendants.
DECLARE_ERROR( ERR_TYPE_HAS_DESCENDANTS                                    , 0x96506);

//Type "%S" is not registered as descendant of type "%S".
DECLARE_ERROR( ERR_TYPE_WRONG_BASETYPE                                     , 0x96507);

//Type "%S" has internal category and can not be created, drop
//ed or changed.
DECLARE_ERROR( ERR_TYPE_HAS_INTERNAL_CATEGORY                              , 0x96508);

//Type "%S" is used by %S.
DECLARE_ERROR( ERR_TYPE_IN_USE                                             , 0x96509);

//Type "%S" - unappropriated default value "%S".
DECLARE_ERROR( ERR_TYPE_BAD_DEFAULT_VALUE                                  , 0x96510);

//Type "%S" - unappropriated category.
DECLARE_ERROR( ERR_TYPE_WRONG_CATEGORY                                     , 0x96511);

//Type "%S" - "%S" items available, but "%S" items required.
DECLARE_ERROR( ERR_TYPE_INSUFFICIENT_SPACE                                 , 0x96512);

//Locale name "%S" is not unique for type "%S".
DECLARE_ERROR( ERR_TYPE_LOCALE_NAME_NOT_UNIQUE                             , 0x96513);

//Wrong param count for type "%S", locale "%S". Type requires 
//"%S" values.
DECLARE_ERROR( ERR_TYPE_LOCALE_WRONG_PARAMS_COUNT                          , 0x96514);

//Locale name "%S" is not found for type "%S".
DECLARE_ERROR( ERR_TYPE_LOCALE_NAME_NOT_FOUND                              , 0x96515);


#pragma mark Volume errors

/**********************************************************************************************/
// CLASS:  97               Volume errors
// 

//Volume Segment "%S" is wrong. Volume is corrupted.
DECLARE_ERROR( ERR_WRONG_SEGMENT                                           , 0x97500);

//Volume "%S" - segment limit reached. Clone the database with
// larger segment size.
DECLARE_ERROR( ERR_SEGMENT_LIMIT                                           , 0x97501);


#pragma mark Aspects errors

/**********************************************************************************************/
// CLASS:  98               Aspects errors
// 

//Aspect bad ID error.
DECLARE_ERROR( ERR_ASPECT_BAD_ID                                           , 0x98501);

//Aspect is already exist.
DECLARE_ERROR( ERR_ASPECT_ALREADY_EXIST                                    , 0x98502);


#pragma mark Internal Error

/**********************************************************************************************/
// CLASS:  99               Internal Error
// 

//"%S" Table "%S" is corrupted.
DECLARE_ERROR( ERR_INTERNAL_DATA_CORRUPTED                                 , 0x99501);

//"%S" Varchar data "%S" is corrupted.
DECLARE_ERROR( ERR_INTERNAL_VARCHAR_CORRUPTED                              , 0x99503);

//"%S" Embedded file "%S" not found.
DECLARE_ERROR( ERR_INTERNAL_EMBFILE_NOT_FOUND                              , 0x99507);

//"%S" Varchar page "%S" is corrupted.
DECLARE_ERROR( ERR_INTERNAL_VARCHAR_PAGE_CORRUPTED                         , 0x99508);

//"%S" Cant open new version.
DECLARE_ERROR( ERR_INTERNAL_OPEN_NEW_VERSION                               , 0x99509);

//"%S" Error during domain reading.
DECLARE_ERROR( ERR_INTERNAL_READING_DOMAIN                                 , 0x9950A);

//"%S" Base object not found.
DECLARE_ERROR( ERR_INTERNAL_BASE_OBJECT_NOT_FOUND                          , 0x9950B);

//"%S" Invalid parameter value was specified in function "%S".
DECLARE_ERROR( ERR_INTERNAL_INVALID_PARAMETER                              , 0x99513);

//"%S" Function "%S" must not to be called.
DECLARE_ERROR( ERR_INTERNAL_FUNC_MUST_NOT_BE_CALLED                        , 0x99514);

//"%S" Error in function "%S".
DECLARE_ERROR( ERR_INTERNAL_FUNC                                           , 0x99515);

//"%S" Embedded file "%S" is opened already.
DECLARE_ERROR( ERR_INTERNAL_EMBFILE_IS_OPENED                              , 0x99516);

//"%S" Embedded file "%S" is not opened.
DECLARE_ERROR( ERR_INTERNAL_EMBFILE_IS_NOT_OPENED                          , 0x99517);

//"%S" Embedded file "%S" - EOF reached.
DECLARE_ERROR( ERR_INTERNAL_EMBFILE_EOF                                    , 0x99518);

//"%S" Duplicated RECID found.
DECLARE_ERROR( ERR_INTERNAL_DUPLICATED_RECID_FOUND                         , 0x99519);

//Demo-version time limit reached
DECLARE_ERROR( ERR_INTERNAL_DEMO_TIMEOUT                                   , 0x99520);

//"%S" SegmentMap is corrupted - "%S"
DECLARE_ERROR( ERR_INTERNAL_SEGMENTMAP_CORRUPTED                           , 0x9952A);

//"%S" Owner name "%S": Segment "%S" is wrong. The last segmen
//t is "%S".
DECLARE_ERROR( ERR_INTERNAL_WRONG_SEGMENT                                  , 0x9952B);

//"%S" Field "%S", record "%S". Wrong data length - "%S".
DECLARE_ERROR( ERR_INTERNAL_FIELD_WRONG_LENGTH                             , 0x9952C);

//Journal page not unique. Page type: "%S", Volume: "%S", File
//: "%S", FileOffset: "%S", JournalOffset: "%S".
DECLARE_ERROR( ERR_JOURNALED_PAGE_NOT_UNIQUE                               , 0x9952D);

//"%S" Page file is corrupted - "%S"
DECLARE_ERROR( ERR_INTERNAL_PAGEFILE_CORRUPTED                             , 0x9952E);


/**********************************************************************************************/
FBL_End_Namespace

// FINAL:
#include <VShared/FBL/publ/Headers/FBL_post_header.h>

#endif // _FBL_Errors_h
